import { useState, useEffect } from 'react';
import { 
  View, 
  Text, 
  StyleSheet, 
  Pressable, 
  Animated, 
  Image, 
  ScrollView, 
  SafeAreaView, 
  Dimensions,
  TextInput,
  Platform,
  Alert,
  Modal
} from 'react-native';
import { MaterialCommunityIcons, Ionicons } from '@expo/vector-icons';
import { LinearGradient } from 'expo-linear-gradient';

const { width, height } = Dimensions.get('window');
const API_URL = 'http://10.10.162.175:3001/data';

// Login Screen Component (unchanged)
const LoginScreen = ({ onClose, onLogin }) => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [isLogin, setIsLogin] = useState(true);
  const [error, setError] = useState('');

  const mockUsers = new Map();
  mockUsers.set('user', 'password123');

  const handleAuth = async () => {
    const trimmedUsername = username.trim().toLowerCase();
    const trimmedPassword = password.trim();

    if (!trimmedUsername || !trimmedPassword) {
      setError('Username and password are required.');
      return;
    }

    if (isLogin) {
      if (mockUsers.has(trimmedUsername) && mockUsers.get(trimmedUsername) === trimmedPassword) {
        onLogin(trimmedUsername);
        setError('');
      } else {
        setError('Invalid username or password.');
      }
    } else {
      if (mockUsers.has(trimmedUsername)) {
        setError('User already exists. Please log in.');
      } else {
        mockUsers.set(trimmedUsername, trimmedPassword);
        onLogin(trimmedUsername);
        setError('');
      }
    }
  };

  return (
    <SafeAreaView style={styles.safeArea}>
      <LinearGradient colors={['#2E7D32', '#1976D2']} style={styles.container}>
        <View style={styles.header}>
          <Pressable onPress={onClose} style={styles.backButton}>
            <Ionicons name="arrow-back" size={24} color="#FFFFFF" />
          </Pressable>
          <Text style={styles.headerTitle}>{isLogin ? 'Login' : 'Sign Up'}</Text>
        </View>

        <View style={styles.loginContainer}>
          {error ? <Text style={styles.errorText}>{error}</Text> : null}
          <TextInput
            style={styles.input}
            value={username}
            onChangeText={setUsername}
            placeholder="Username"
            placeholderTextColor="#999"
            autoCapitalize="none"
          />
          <TextInput
            style={styles.input}
            value={password}
            onChangeText={setPassword}
            placeholder="Password"
            placeholderTextColor="#999"
            secureTextEntry
          />
          <Pressable style={styles.authButton} onPress={handleAuth}>
            <Text style={styles.authButtonText}>{isLogin ? 'Login' : 'Sign Up'}</Text>
          </Pressable>
          <Pressable onPress={() => setIsLogin(!isLogin)}>
            <Text style={styles.toggleText}>
              {isLogin ? 'Need an account? Sign Up' : 'Already have an account? Login'}
            </Text>
          </Pressable>
        </View>
      </LinearGradient>
    </SafeAreaView>
  );
};

// Rewards Screen Component (unchanged)
const RewardsScreen = ({ onClose, userId, wasteWeights }) => {
  const [fadeAnim] = useState(new Animated.Value(0));
  const [selectedTab, setSelectedTab] = useState('offers');
  const [userPoints, setUserPoints] = useState(0);
  const [history, setHistory] = useState([]);

  useEffect(() => {
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 800,
      useNativeDriver: true,
    }).start();

    const credits = calculateCycleCredits(wasteWeights);
    setUserPoints(credits);
  }, [wasteWeights]);

  const calculateCycleCredits = (weights) => {
    const credits = { plastic: 30, paper: 20, organic: 10, metal: 50 };
    return (
      (weights.plastic || 0) * credits.plastic +
      (weights.paper || 0) * credits.paper +
      (weights.organic || 0) * credits.organic +
      (weights.metal || 0) * credits.metal
    );
  };

  const handleRedeem = (reward) => {
    if (userPoints >= reward.points) {
      setUserPoints(userPoints - reward.points);
      setHistory([...history, { action: Redeemed ${reward.title}, points: -reward.points, date: new Date().toLocaleDateString() }]);
      Alert.alert('Success', ${reward.title} has been redeemed successfully!);
    } else {
      Alert.alert('Error', 'Insufficient points to redeem this reward.');
    }
  };

  return (
    <SafeAreaView style={styles.safeArea}>
      <LinearGradient colors={['#2E7D32', '#1976D2']} style={styles.container}>
        <View style={styles.header}>
          <Pressable onPress={onClose} style={styles.backButton}>
            <Ionicons name="arrow-back" size={24} color="#FFFFFF" />
          </Pressable>
          <Text style={styles.headerTitle}>My Rewards</Text>
        </View>

        <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
          <View style={styles.tabSelector}>
            {['offers', 'history'].map((tab) => (
              <Pressable
                key={tab}
                style={[styles.tabButton, selectedTab === tab && styles.tabButtonActive]}
                onPress={() => setSelectedTab(tab)}
              >
                <Text style={[styles.tabButtonText, selectedTab === tab && styles.tabButtonTextActive]}>
                  {tab.charAt(0).toUpperCase() + tab.slice(1)}
                </Text>
              </Pressable>
            ))}
          </View>

          {selectedTab === 'offers' ? (
            <Animated.View style={{ opacity: fadeAnim }}>
              <View style={styles.pointsCard}>
                <MaterialCommunityIcons name="star-circle" size={40} color="#2E7D32" />
                <Text style={styles.pointsValue}>{userPoints}</Text>
                <Text style={styles.pointsLabel}>Cycle Credits</Text>
              </View>
              <View style={styles.rewardsGrid}>
                {[
                  { title: 'Eco Store Voucher', points: 500, icon: 'store' },
                  { title: 'Plant a Tree', points: 750, icon: 'tree' },
                  { title: 'Community Project', points: 1000, icon: 'account-group' },
                  { title: 'Premium Badge', points: 300, icon: 'shield-star' },
                  { title: 'Recycled Bamboo Water Bottle', points: 800, icon: 'bottle-soda' },
                  { title: 'Organic Cotton Tote Bag', points: 600, icon: 'bag-personal' },
                  { title: 'Solar-Powered Charger', points: 1000, icon: 'solar-power' },
                  { title: 'Biodegradable Phone Case', points: 450, icon: 'cellphone' },
                ].map((reward, index) => (
                  <Animated.View
                    key={index}
                    style={[styles.rewardCard, {
                      transform: [{
                        translateY: fadeAnim.interpolate({
                          inputRange: [0, 1],
                          outputRange: [50, 0],
                        }),
                      }],
                    }]}
                  >
                    <MaterialCommunityIcons name={reward.icon} size={32} color="#2E7D32" />
                    <Text style={styles.rewardTitle}>{reward.title}</Text>
                    <Text style={styles.rewardPoints}>{reward.points} Credits</Text>
                    <Pressable 
                      style={[styles.redeemButton, userPoints >= reward.points ? {} : styles.disabledRedeemButton]}
                      onPress={() => handleRedeem(reward)}
                      disabled={userPoints < reward.points}
                    >
                      <Text style={styles.redeemButtonText}>Redeem</Text>
                    </Pressable>
                  </Animated.View>
                ))}
              </View>
            </Animated.View>
          ) : (
            <Animated.View style={{ opacity: fadeAnim }}>
              <View style={styles.historyList}>
                {history.map((item, index) => (
                  <Animated.View
                    key={index}
                    style={[styles.historyItem, {
                      transform: [{
                        translateX: fadeAnim.interpolate({
                          inputRange: [0, 1],
                          outputRange: [100, 0],
                        }),
                      }],
                    }]}
                  >
                    <View style={styles.historyItemContent}>
                      <Text style={styles.historyAction}>{item.action}</Text>
                      <Text style={styles.historyDate}>{item.date}</Text>
                    </View>
                    <Text style={[styles.historyPoints, { color: item.points >= 0 ? '#2E7D32' : '#D32F2F' }]}>
                      {item.points >= 0 ? '+' : ''}{item.points}
                    </Text>
                  </Animated.View>
                ))}
              </View>
            </Animated.View>
          )}

          <View style={styles.achievementsSection}>
            <Text style={styles.sectionTitle}>Achievements</Text>
            <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.achievementsScroll}>
              {[
                { title: 'Recycling Champion', progress: 1, icon: 'trophy' },
                { title: 'Tree Saver', progress: 0.7, icon: 'tree' },
                { title: 'Eco Warrior', progress: 0.4, icon: 'shield' },
              ].map((achievement, index) => (
                <View key={index} style={styles.achievementCard}>
                  <MaterialCommunityIcons name={achievement.icon} size={32} color="#2E7D32" />
                  <Text style={styles.achievementTitle}>{achievement.title}</Text>
                  <View style={styles.progressBar}>
                    <View style={[styles.progressFill, { width: ${achievement.progress * 100}% }]} />
                  </View>
                </View>
              ))}
            </ScrollView>
          </View>
        </ScrollView>
      </LinearGradient>
    </SafeAreaView>
  );
};

// Analysis Screen Component (unchanged)
const AnalysisScreen = ({ onClose, wasteWeights, environmentalImpact }) => {
  const [selectedPeriod, setSelectedPeriod] = useState('week');
  const [fadeAnim] = useState(new Animated.Value(0));
  const [chartAnim] = useState(new Animated.Value(0));

  useEffect(() => {
    Animated.parallel([
      Animated.timing(fadeAnim, { toValue: 1, duration: 1000, useNativeDriver: true }),
      Animated.timing(chartAnim, { toValue: 1, duration: 1500, useNativeDriver: true }),
    ]).start();
  }, []);

  const totalWeight = (wasteWeights.paper || 0) + (wasteWeights.plastic || 0) + (wasteWeights.metal || 0) + (wasteWeights.organic || 0);
  const distribution = {
    plastic: totalWeight ? ((wasteWeights.plastic || 0) / totalWeight * 100).toFixed(1) : 0,
    paper: totalWeight ? ((wasteWeights.paper || 0) / totalWeight * 100).toFixed(1) : 0,
    metal: totalWeight ? ((wasteWeights.metal || 0) / totalWeight * 100).toFixed(1) : 0,
    organic: totalWeight ? ((wasteWeights.organic || 0) / totalWeight * 100).toFixed(1) : 0,
  };

  return (
    <SafeAreaView style={styles.safeArea}>
      <LinearGradient colors={['#2E7D32', '#1976D2']} style={styles.analysisContainer}>
        <View style={styles.header}>
          <Pressable onPress={onClose} style={styles.backButton}>
            <Ionicons name="arrow-back" size={24} color="#FFFFFF" />
          </Pressable>
          <Text style={styles.headerTitle}>Analysis</Text>
        </View>

        <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
          <View style={styles.periodSelector}>
            {['week', 'month', 'year'].map((period) => (
              <Pressable
                key={period}
                style={[styles.periodButton, selectedPeriod === period && styles.periodButtonActive]}
                onPress={() => setSelectedPeriod(period)}
              >
                <Text style={[styles.periodButtonText, selectedPeriod === period && styles.periodButtonTextActive]}>
                  {period.charAt(0).toUpperCase() + period.slice(1)}
                </Text>
              </Pressable>
            ))}
          </View>

          <Animated.View style={[styles.chartContainer, { opacity: chartAnim }]}>
            <Text style={styles.sectionTitle}>Waste Distribution</Text>
            <View style={styles.pieChart}>
              {['Plastic', 'Paper', 'Organic', 'Metal'].map((type, index) => (
                <View key={type} style={styles.pieChartItem}>
                  <MaterialCommunityIcons
                    name={['recycle', 'newspaper', 'leaf', 'trash-can'][index]}
                    size={24}
                    color="#FFFFFF"
                  />
                  <Text style={styles.pieChartLabel}>{type}</Text>
                  <Text style={styles.pieChartValue}>{distribution[type.toLowerCase()]}%</Text>
                </View>
              ))}
            </View>
          </Animated.View>

          <Animated.View style={[styles.impactContainer, { opacity: fadeAnim }]}>
            <Text style={styles.sectionTitle}>Environmental Impact</Text>
            <View style={styles.impactGrid}>
              {[
                { icon: 'tree', label: 'Trees Saved', value: environmentalImpact.treesSaved.toFixed(1) },
                { icon: 'water', label: 'Water Saved', value: ${environmentalImpact.waterSaved.toFixed(1)} L },
                { icon: 'molecule-co2', label: 'CO₂ Reduced', value: ${environmentalImpact.co2Saved.toFixed(1)} kg },
              ].map((item, index) => (
                <View key={index} style={styles.impactCard}>
                  <MaterialCommunityIcons name={item.icon} size={32} color="#2E7D32" />
                  <Text style={styles.impactValue}>{item.value}</Text>
                  <Text style={styles.impactLabel}>{item.label}</Text>
                </View>
              ))}
            </View>
          </Animated.View>
        </ScrollView>
      </LinearGradient>
    </SafeAreaView>
  );
};

// Recycle Screen Component (unchanged)
const RecycleScreen = ({ onClose }) => {
  const [viewMode, setViewMode] = useState('list');
  const [slideAnim] = useState(new Animated.Value(0));
  const [selectedCenter, setSelectedCenter] = useState(null);

  useEffect(() => {
    Animated.spring(slideAnim, {
      toValue: 1,
      tension: 20,
      friction: 7,
      useNativeDriver: true,
    }).start();
  }, []);

  const wasteDistribution = {
    'EcoRecycle Center': { Plastic: 40, Paper: 30, Organic: 20, Metal: 10 },
    'Green Earth Composting': { Plastic: 10, Paper: 20, Organic: 60, Metal: 10 },
    'MetalWorks Recycling': { Plastic: 5, Paper: 10, Organic: 5, Metal: 80 },
  };

  const handleCenterPress = (centerName) => {
    setSelectedCenter(centerName);
    setTimeout(() => setSelectedCenter(null), 3000);
  };

  return (
    <SafeAreaView style={styles.safeArea}>
      <LinearGradient colors={['#2E7D32', '#1976D2']} style={styles.recycleContainer}>
        <View style={styles.header}>
          <Pressable onPress={onClose} style={styles.backButton}>
            <Ionicons name="arrow-back" size={24} color="#FFFFFF" />
          </Pressable>
          <Text style={styles.headerTitle}>Recycle Centers</Text>
        </View>

        <View style={styles.viewToggle}>
          {['list', 'map'].map((mode) => (
            <Pressable
              key={mode}
              style={[styles.viewToggleButton, viewMode === mode && styles.viewToggleButtonActive]}
              onPress={() => setViewMode(mode)}
            >
              <MaterialCommunityIcons
                name={mode === 'list' ? 'format-list-bulleted' : 'map'}
                size={24}
                color={viewMode === mode ? '#2E7D32' : '#666'}
              />
            </Pressable>
          ))}
        </View>

        <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
          {viewMode === 'list' ? (
            [
              { name: 'EcoRecycle Center', types: ['Plastic', 'Paper'], distance: '2.5 km', status: 'Active' },
              { name: 'Green Earth Composting', types: ['Organic'], distance: '3.8 km', status: 'Active' },
              { name: 'MetalWorks Recycling', types: ['Metal'], distance: '5.2 km', status: 'Inactive' },
            ].map((org, index) => (
              <Animated.View
                key={org.name}
                style={[styles.orgCard, {
                  transform: [{
                    translateX: slideAnim.interpolate({
                      inputRange: [0, 1],
                      outputRange: [300, 0],
                    }),
                  }],
                }]}
              >
                <Pressable onPress={() => handleCenterPress(org.name)}>
                  <View style={styles.orgHeader}>
                    <Text style={styles.orgName}>{org.name}</Text>
                    <View style={[styles.statusIndicator, { backgroundColor: org.status === 'Active' ? '#4CAF50' : '#999' }]} />
                  </View>
                  <View style={styles.orgTypes}>
                    {org.types.map((type) => (
                      <View key={type} style={styles.typeTag}>
                        <Text style={styles.typeText}>{type}</Text>
                      </View>
                    ))}
                  </View>
                  <View style={styles.orgFooter}>
                    <MaterialCommunityIcons name="map-marker" size={20} color="#666" />
                    <Text style={styles.distanceText}>{org.distance}</Text>
                  </View>
                </Pressable>
              </Animated.View>
            ))
          ) : (
            <View style={styles.mapPlaceholder}>
              <MaterialCommunityIcons name="map" size={64} color="#FFFFFF" />
              <Text style={styles.mapPlaceholderText}>Map View Coming Soon</Text>
            </View>
          )}
        </ScrollView>
      </LinearGradient>

      <Modal
        animationType="slide"
        transparent={true}
        visible={selectedCenter !== null}
        onRequestClose={() => setSelectedCenter(null)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>{selectedCenter} Waste Distribution</Text>
              <Pressable onPress={() => setSelectedCenter(null)} style={styles.modalCloseButton}>
                <Ionicons name="close" size={24} color="#FFFFFF" />
              </Pressable>
            </View>
            {selectedCenter && wasteDistribution[selectedCenter] && (
              <View style={styles.distributionList}>
                {Object.entries(wasteDistribution[selectedCenter]).map(([type, percentage]) => (
                  <View key={type} style={styles.distributionItem}>
                    <Text style={styles.distributionType}>{type}</Text>
                    <Text style={styles.distributionValue}>{percentage}%</Text>
                  </View>
                ))}
              </View>
            )}
          </View>
        </View>
      </Modal>
    </SafeAreaView>
  );
};

// Records Screen Component (unchanged)
const RecordsScreen = ({ onClose, user }) => {
  const [fadeAnim] = useState(new Animated.Value(0));
  const [records, setRecords] = useState([]);

  useEffect(() => {
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 800,
      useNativeDriver: true,
    }).start();
    fetchRecords();
  }, [user]);

  const fetchRecords = async () => {
    try {
      const response = await fetch('http://192.168.1.X:5000/api/bin-codes');
      const data = await response.json();
      setRecords(data);
    } catch (error) {
      console.error('Error fetching records:', error);
      Alert.alert('Error', 'Failed to load records. Please try again.');
    }
  };

  return (
    <SafeAreaView style={styles.safeArea}>
      <LinearGradient colors={['#2E7D32', '#1976D2']} style={styles.container}>
        <View style={styles.header}>
          <Pressable onPress={onClose} style={styles.backButton}>
            <Ionicons name="arrow-back" size={24} color="#FFFFFF" />
          </Pressable>
          <Text style={styles.headerTitle}>View Records</Text>
        </View>

        <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
          {records.length === 0 ? (
            <Text style={styles.noDataText}>No bin codes recorded yet.</Text>
          ) : (
            records.map((record, index) => (
              <Animated.View
                key={index}
                style={[styles.recordCard, {
                  opacity: fadeAnim,
                  transform: [{
                    translateY: fadeAnim.interpolate({
                      inputRange: [0, 1],
                      outputRange: [50, 0],
                    }),
                  }],
                }]}
              >
                <Text style={styles.recordText}>Bin Code: {record.code}</Text>
                <Text style={styles.recordDate}>Date: {new Date(record.created_at).toLocaleDateString()}</Text>
              </Animated.View>
            ))
          )}
        </ScrollView>
      </LinearGradient>
    </SafeAreaView>
  );
};

// QR Scanner Screen Component (unchanged)
const QRScannerScreen = ({ onClose, onScan, user }) => {
  const [scanned, setScanned] = useState(false);
  const [binCode, setBinCode] = useState('');

  const handleSubmitBinCode = async () => {
    if (binCode) {
      setScanned(true);
      await onScan(binCode);
    }
  };

  return (
    <SafeAreaView style={styles.safeArea}>
      <LinearGradient colors={['#2E7D32', '#1976D2']} style={styles.container}>
        <View style={styles.header}>
          <Pressable onPress={onClose} style={styles.backButton}>
            <Ionicons name="arrow-back" size={24} color="#FFFFFF" />
          </Pressable>
          <Text style={styles.headerTitle}>Enter Bin Code</Text>
        </View>
        <View style={styles.webScannerContainer}>
          <Text style={styles.scanInstruction}>Enter the Bin Code:</Text>
          <TextInput
            style={styles.qrInput}
            value={binCode}
            onChangeText={setBinCode}
            placeholder="e.g., Bin123"
            placeholderTextColor="#999"
          />
          <Pressable style={styles.mockScanButton} onPress={handleSubmitBinCode}>
            <Text style={styles.mockScanButtonText}>Submit Bin Code</Text>
          </Pressable>
          {scanned && (
            <Pressable style={styles.rescanButton} onPress={() => setScanned(false)}>
              <Text style={styles.rescanButtonText}>Enter Again</Text>
            </Pressable>
          )}
        </View>
      </LinearGradient>
    </SafeAreaView>
  );
};

// Carbon Wallet Screen Component (unchanged except navigation)
const CarbonWalletScreen = ({ onClose, carbonCredits, setCurrentView }) => {
  const [fadeAnim] = useState(new Animated.Value(0));
  const creditValue = carbonCredits * 800; // Mock value: 1 CC = ₹800 INR

  useEffect(() => {
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 800,
      useNativeDriver: true,
    }).start();
  }, []);

  const handleSellCredits = () => {
    setCurrentView('cryptoPaymentGateway');
  };

  return (
    <SafeAreaView style={styles.safeArea}>
      <LinearGradient colors={['#FFD700', '#FFA500']} style={styles.container}>
        <View style={styles.header}>
          <Pressable onPress={onClose} style={styles.backButton}>
            <Ionicons name="arrow-back" size={24} color="#FFFFFF" />
          </Pressable>
          <Text style={styles.headerTitle}>Carbon Wallet Details</Text>
        </View>

        <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
          <Animated.View style={{ opacity: fadeAnim }}>
            <View style={styles.walletSummary}>
              <Text style={styles.walletIcon}>₡</Text>
              <Text style={styles.walletCredits}>{carbonCredits.toFixed(1)} CC</Text>
              <Text style={styles.walletValue}>≈ ₹{creditValue.toFixed(2)} INR</Text>
              <Text style={styles.walletSubtitle}>Blockchain-Verified Carbon Credits</Text>
            </View>

            <View style={styles.detailsSection}>
              <Text style={styles.sectionTitle}>Credit Details</Text>
              <View style={styles.detailItem}>
                <Text style={styles.detailLabel}>Total Credits</Text>
                <Text style={styles.detailValue}>{carbonCredits.toFixed(1)} CC</Text>
              </View>
              <View style={styles.detailItem}>
                <Text style={styles.detailLabel}>Market Value per CC</Text>
                <Text style={styles.detailValue}>₹800.00</Text>
              </View>
              <View style={styles.detailItem}>
                <Text style={styles.detailLabel}>Equivalent CO₂ Offset</Text>
                <Text style={styles.detailValue}>{carbonCredits.toFixed(1)} tCO₂e</Text>
              </View>
            </View>

            <View style={styles.actionSection}>
              <Text style={styles.sectionTitle}>Marketplace</Text>
              <Text style={styles.marketplaceText}>
                Sell your credits to companies needing to meet carbon neutrality goals. Each CC represents 1 tonne of CO₂ equivalent offset.
              </Text>
              <Pressable style={styles.sellButton} onPress={handleSellCredits}>
                <Text style={styles.sellButtonText}>Sell Credits</Text>
              </Pressable>
            </View>
          </Animated.View>
        </ScrollView>
      </LinearGradient>
    </SafeAreaView>
  );
};

// Updated Crypto Payment Gateway Screen Component
const CryptoPaymentGatewayScreen = ({ onClose, carbonCredits, setCarbonCredits }) => {
  const [fadeAnim] = useState(new Animated.Value(0));
  const [creditsToSell, setCreditsToSell] = useState('');
  const walletAddress = "0xEcoCarbon123...456"; // Mock wallet address

  useEffect(() => {
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 800,
      useNativeDriver: true,
    }).start();
  }, []);

  const handleCreditsChange = (text) => {
    const value = text.replace(/[^0-9.]/g, ''); // Allow only numbers and decimal
    setCreditsToSell(value);
  };

  const handleConfirmPayment = () => {
    const credits = parseFloat(creditsToSell);
    if (!credits || credits <= 0 || credits > carbonCredits) {
      Alert.alert('Invalid Input', 'Please enter a valid number of credits to sell (up to your total balance).');
      return;
    }

    const creditValue = credits * 800; // 1 CC = ₹800 INR
    const transactionFee = creditValue * 0.02; // 2% fee
    const netAmount = creditValue - transactionFee;

    Alert.alert(
      'Confirm Transaction',
      You are selling ${credits.toFixed(1)} CC for ₹${creditValue.toFixed(2)} INR (Fee: ₹${transactionFee.toFixed(2)}). Net Amount: ₹${netAmount.toFixed(2)}. Proceed?,
      [
        { text: 'Cancel', style: 'cancel' },
        { text: 'Confirm', onPress: () => {
          setCarbonCredits(prev => prev - credits); // Debit the sold credits
          Alert.alert('Transaction Successful', Sold ${credits.toFixed(1)} CC. ₹${netAmount.toFixed(2)} INR transferred to your wallet.);
          onClose(); // Return to main screen
        }},
      ]
    );
  };

  const creditValue = (parseFloat(creditsToSell) || 0) * 800;
  const transactionFee = creditValue * 0.02;
  const netAmount = creditValue - transactionFee;

  return (
    <SafeAreaView style={styles.safeArea}>
      <LinearGradient colors={['#1E3A8A', '#3B82F6']} style={styles.container}>
        <View style={styles.header}>
          <Pressable onPress={onClose} style={styles.backButton}>
            <Ionicons name="arrow-back" size={24} color="#FFFFFF" />
          </Pressable>
          <Text style={styles.headerTitle}>Crypto Payment Gateway</Text>
        </View>

        <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
          <Animated.View style={{ opacity: fadeAnim }}>
            <View style={styles.paymentSummary}>
              <Text style={styles.paymentIcon}>₡</Text>
              <Text style={styles.paymentTitle}>Sell Carbon Credits</Text>
              <Text style={styles.paymentSubtitle}>Available: {carbonCredits.toFixed(1)} CC</Text>
              <TextInput
                style={styles.creditsInput}
                value={creditsToSell}
                onChangeText={handleCreditsChange}
                placeholder="Enter CC to sell"
                placeholderTextColor="#999"
                keyboardType="numeric"
              />
              <Text style={styles.paymentValue}>₹{creditValue.toFixed(2)} INR</Text>
            </View>

            <View style={styles.paymentDetails}>
              <Text style={styles.sectionTitle}>Transaction Details</Text>
              <View style={styles.detailItem}>
                <Text style={styles.detailLabel}>Credits to Sell</Text>
                <Text style={styles.detailValue}>{(parseFloat(creditsToSell) || 0).toFixed(1)} CC</Text>
              </View>
              <View style={styles.detailItem}>
                <Text style={styles.detailLabel}>Amount (INR)</Text>
                <Text style={styles.detailValue}>₹{creditValue.toFixed(2)}</Text>
              </View>
              <View style={styles.detailItem}>
                <Text style={styles.detailLabel}>Transaction Fee (2%)</Text>
                <Text style={styles.detailValue}>₹{transactionFee.toFixed(2)}</Text>
              </View>
              <View style={styles.detailItem}>
                <Text style={styles.detailLabel}>Net Amount</Text>
                <Text style={styles.detailValue}>₹{netAmount.toFixed(2)}</Text>
              </View>
            </View>

            <View style={styles.qrSection}>
              <Text style={styles.sectionTitle}>Send Payment</Text>
              <Text style={styles.qrInstruction}>
                Scan the QR code or copy the wallet address to send your CC via a crypto wallet (e.g., MetaMask).
              </Text>
              <View style={styles.qrPlaceholder}>
                <MaterialCommunityIcons name="qrcode" size={100} color="#FFFFFF" />
                <Text style={styles.qrText}>Mock QR Code</Text>
              </View>
              <Text style={styles.walletAddress}>{walletAddress}</Text>
            </View>

            <Pressable style={styles.confirmButton} onPress={handleConfirmPayment}>
              <Text style={styles.confirmButtonText}>Confirm Payment</Text>
            </Pressable>
          </Animated.View>
        </ScrollView>
      </LinearGradient>
    </SafeAreaView>
  );
};

// Main Screen Component (Updated to pass setCarbonCredits)
const MainScreen = ({ onClose, user, scannedData, records, onAddRecord }) => {
  const [currentView, setCurrentView] = useState('main');
  const [widgetAnim] = useState(new Animated.Value(0));
  const [waterSaved, setWaterSaved] = useState(0);
  const [co2Saved, setCo2Saved] = useState(0);
  const [treesSaved, setTreesSaved] = useState(0);
  const [carbonCredits, setCarbonCredits] = useState(0);
  const [totalWaste, setTotalWaste] = useState(0);
  const [wasteWeights, setWasteWeights] = useState({ paper: 0, plastic: 0, metal: 0, organic: 0 });
  const [environmentalImpact, setEnvironmentalImpact] = useState({ treesSaved: 0, waterSaved: 0, co2Saved: 0 });

  useEffect(() => {
    Animated.timing(widgetAnim, {
      toValue: 1,
      duration: 800,
      useNativeDriver: true,
    }).start();
    fetchWasteWeights();
    fetchEnvironmentalImpact();
    fetchCarbonCredits();
  }, []);

  const widgetScale = widgetAnim.interpolate({
    inputRange: [0, 1],
    outputRange: [0.8, 1],
  });

  const fetchWasteWeights = async () => {
    try {
      const response = await fetch(${API_URL}/waste_weights);
      const data = await response.json();
      const total = data.reduce((sum, entry) => sum + (entry.total_weight || 0), 0);
      setTotalWaste(total);

      const splitWeight = total / 4;
      const weights = {
        paper: splitWeight,
        plastic: splitWeight,
        metal: splitWeight,
        organic: splitWeight,
      };
      setWasteWeights(weights);

      const impact = calculateEnvironmentalImpact(weights);
      setEnvironmentalImpact(impact);
      setWaterSaved(impact.waterSaved);
      setCo2Saved(impact.co2Saved);
      setTreesSaved(impact.treesSaved);
    } catch (error) {
      console.error('Error fetching waste weights:', error);
      Alert.alert('Error', 'Failed to load waste data. Using defaults.');
      setTotalWaste(24.5);
      const fallbackWeights = { paper: 6.125, plastic: 6.125, metal: 6.125, organic: 6.125 };
      setWasteWeights(fallbackWeights);
      const impact = calculateEnvironmentalImpact(fallbackWeights);
      setEnvironmentalImpact(impact);
      setWaterSaved(impact.waterSaved);
      setCo2Saved(impact.co2Saved);
      setTreesSaved(impact.treesSaved);
    }
  };

  const calculateEnvironmentalImpact = (weights) => {
    const impact = {
      treesSaved: (weights.paper * 0.5 + weights.organic * 0.3) / 10,
      waterSaved: (weights.plastic * 50 + weights.metal * 20),
      co2Saved: (weights.metal * 10 + weights.plastic * 5 + weights.paper * 2)
    };
    return impact;
  };

  const handleScan = async (data) => {
    try {
      setScannedData(data);
      setCurrentView('main');
      fetchWasteWeights();
      fetchCarbonCredits();
    } catch (error) {
      console.error('Error handling bin code:', error);
      Alert.alert('Error', 'Failed to process bin code. Please try again.');
    }
  };

  const fetchEnvironmentalImpact = async () => {
    try {
      const response = await fetch('https://vasudhevdharanish-cycleworks.hf.space');
      if (response.ok) {
        const data = await response.json();
        setWaterSaved(data['Water Saved (Liters)'] || 0);
        setCo2Saved(data['CO2 Saved (kg)'] || 0);
        setTreesSaved(data['Trees Saved'] || 0);
      } else {
        throw new Error('Failed to fetch environmental impact data');
      }
    } catch (error) {
      console.error('Error fetching environmental impact:', error);
      Alert.alert('Error', 'Failed to load environmental impact data. Using default values.');
      setWaterSaved(308.96);
      setCo2Saved(251.87);
      setTreesSaved(5);
    }
  };

  const fetchCarbonCredits = async () => {
    try {
      const baselineEmissions = 25;
      const projectEmissions = 10;
      const gwp = 1;

      const response = await fetch('https://api.xai.grok/v1/carbon-credits/calculate', {
        method: 'POST',
        headers: {
          'Authorization': 'Bearer your-api-key',
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          baseline_emissions: baselineEmissions,
          project_emissions: projectEmissions,
          gwp: gwp,
        }),
      });

      if (response.ok) {
        const data = await response.json();
        setCarbonCredits(data.carbon_credits);
      } else {
        throw new Error('Failed to fetch carbon credits from API');
      }
    } catch (error) {
      console.error('Error fetching carbon credits:', error);
      Alert.alert('Error', 'Failed to load carbon credits from API. Using mock value.');
      const credits = (25 - 10) / 1;
      setCarbonCredits(credits);
    }
  };

  if (currentView === 'analysis') {
    return <AnalysisScreen onClose={() => setCurrentView('main')} wasteWeights={wasteWeights} environmentalImpact={environmentalImpact} />;
  }

  if (currentView === 'recycle' && user) {
    return <RecycleScreen onClose={() => setCurrentView('main')} />;
  }

  if (currentView === 'records' && user) {
    return <RecordsScreen onClose={() => setCurrentView('main')} user={user} />;
  }

  if (currentView === 'rewards' && user) {
    return <RewardsScreen onClose={() => setCurrentView('main')} userId={user} wasteWeights={wasteWeights} />;
  }

  if (currentView === 'carbonWallet' && user) {
    return <CarbonWalletScreen onClose={() => setCurrentView('main')} carbonCredits={carbonCredits} setCurrentView={setCurrentView} />;
  }

  if (currentView === 'cryptoPaymentGateway' && user) {
    return <CryptoPaymentGatewayScreen onClose={() => setCurrentView('main')} carbonCredits={carbonCredits} setCarbonCredits={setCarbonCredits} />;
  }

  return (
    <SafeAreaView style={styles.safeArea}>
      <LinearGradient colors={['#2E7D32', '#1976D2']} style={styles.mainContainer}>
        <View style={styles.header}>
          <Pressable onPress={onClose} style={styles.backButton}>
            <Ionicons name="arrow-back" size={24} color="#FFFFFF" />
          </Pressable>
          <Text style={styles.headerTitle}>Waste Management</Text>
        </View>

        <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
          {scannedData ? (
            <View style={styles.qrDataContainer}>
              <Text style={styles.qrDataTitle}>Bin Information</Text>
              <Text style={styles.qrDataText}>Bin Code: {scannedData}</Text>
            </View>
          ) : (
            <Text style={styles.noDataText}>Enter a bin code to view details</Text>
          )}
          <View style={styles.statsContainer}>
            <View style={[styles.statRow, { justifyContent: 'space-between' }]}>
              <View style={styles.statCard}>
                <MaterialCommunityIcons name="scale" size={24} color="#2E7D32" />
                <Text style={styles.statValue}>{totalWaste.toFixed(1)} kg</Text>
                <Text style={styles.statLabel}>Waste Logged</Text>
              </View>
              <View style={styles.statCard}>
                <MaterialCommunityIcons name="water" size={24} color="#2E7D32" />
                <Text style={styles.statValue}>{waterSaved.toFixed(2)} L</Text>
                <Text style={styles.statLabel}>Water Saved</Text>
              </View>
            </View>
            <View style={[styles.statRow, { justifyContent: 'space-between', marginTop: 16 }]}>
              <View style={styles.statCard}>
                <MaterialCommunityIcons name="leaf" size={24} color="#2E7D32" />
                <Text style={styles.statValue}>{co2Saved.toFixed(2)} kg</Text>
                <Text style={styles.statLabel}>CO₂ Saved</Text>
              </View>
              <View style={styles.statCard}>
                <MaterialCommunityIcons name="tree" size={24} color="#2E7D32" />
                <Text style={styles.statValue}>{treesSaved}</Text>
                <Text style={styles.statLabel}>Trees Saved</Text>
              </View>
            </View>
            <View style={styles.carbonCreditsWrapper}>
              <View style={styles.statCard}>
                <MaterialCommunityIcons name="certificate" size={24} color="#2E7D32" />
                <Text style={styles.statValue}>{carbonCredits.toFixed(1)}</Text>
                <Text style={styles.statLabel}>Carbon Credits</Text>
              </View>
            </View>
          </View>

          <Pressable onPress={() => setCurrentView('carbonWallet')}>
            <View style={styles.carbonWalletContainer}>
              <LinearGradient
                colors={['#FFD700', '#FFA500']}
                style={styles.carbonWalletCard}
              >
                <View style={styles.carbonWalletHeader}>
                  <MaterialCommunityIcons name="blockchain" size={28} color="#FFFFFF" />
                  <Text style={styles.carbonWalletTitle}>Carbon Wallet</Text>
                </View>
                <Text style={styles.carbonWalletValue}>{carbonCredits.toFixed(1)} CC</Text>
                <Text style={styles.carbonWalletSubtitle}>Blockchain-Verified Credits</Text>
                <View style={styles.carbonWalletFooter}>
                  <Text style={styles.carbonWalletInfo}>1 CC = 1 tCO₂e</Text>
                  <MaterialCommunityIcons name="lock-check" size={20} color="#FFFFFF" />
                </View>
              </LinearGradient>
            </View>
          </Pressable>
        </ScrollView>

        <View style={styles.floatingGrid}>
          <Animated.View style={[styles.floatingWidget, { transform: [{ scale: widgetScale }] }]}>
            <Pressable style={styles.widgetButton} onPress={() => setCurrentView('records')}>
              <Text style={styles.widgetText}>View Records</Text>
            </Pressable>
          </Animated.View>
          <Animated.View style={[styles.floatingWidget, { transform: [{ scale: widgetScale }] }]}>
            <Pressable style={styles.widgetButton} onPress={() => setCurrentView('analysis')}>
              <Text style={styles.widgetText}>Analysis</Text>
            </Pressable>
          </Animated.View>
          <Animated.View style={[styles.floatingWidget, { transform: [{ scale: widgetScale }] }]}>
            <Pressable style={styles.widgetButton} onPress={() => setCurrentView('recycle')}>
              <Text style={styles.widgetText}>Recycle</Text>
            </Pressable>
          </Animated.View>
          <Animated.View style={[styles.floatingWidget, { transform: [{ scale: widgetScale }] }]}>
            <Pressable style={styles.widgetButton} onPress={() => setCurrentView('rewards')}>
              <Text style={styles.widgetText}>View Rewards</Text>
            </Pressable>
          </Animated.View>
        </View>
      </LinearGradient>
    </SafeAreaView>
  );
};

// Welcome Screen Component (Updated to pass setCarbonCredits)
export default function WelcomeScreen() {
  const [scaleAnim] = useState(new Animated.Value(1));
  const [rotateAnim] = useState(new Animated.Value(0));
  const [currentScreen, setCurrentScreen] = useState('login');
  const [user, setUser] = useState(null);
  const [scannedData, setScannedData] = useState(null);
  const [records, setRecords] = useState([]);
  const [wasteWeights, setWasteWeights] = useState({ paper: 0, plastic: 0, metal: 0, organic: 0 });
  const [carbonCredits, setCarbonCredits] = useState(0); // Moved to WelcomeScreen for persistence

  useEffect(() => {
    Animated.loop(
      Animated.sequence([
        Animated.timing(scaleAnim, { toValue: 1.1, duration: 1000, useNativeDriver: true }),
        Animated.timing(scaleAnim, { toValue: 1, duration: 1000, useNativeDriver: true }),
      ])
    ).start();

    Animated.loop(
      Animated.timing(rotateAnim, { toValue: 1, duration: 10000, useNativeDriver: true })
    ).start();
  }, []);

  const rotate = rotateAnim.interpolate({
    inputRange: [0, 1],
    outputRange: ['0deg', '360deg'],
  });

  const handleLogin = (username) => {
    setUser(username);
    setCurrentScreen('scanner');
  };

  const handleLogout = () => {
    setUser(null);
    setScannedData(null);
    setRecords([]);
    setCurrentScreen('login');
  };

  const handleScan = async (data) => {
    try {
      setScannedData(data);
      setCurrentScreen('main');
      const response = await fetch(${API_URL}/waste_weights);
      const dataWeights = await response.json();
      const total = dataWeights.reduce((sum, entry) => sum + (entry.total_weight || 0), 0);
      const splitWeight = total / 4;
      const weights = {
        paper: splitWeight,
        plastic: splitWeight,
        metal: splitWeight,
        organic: splitWeight,
      };
      setWasteWeights(weights);
    } catch (error) {
      console.error('Error saving bin code:', error);
      Alert.alert('Error', 'Failed to save bin code. Please try again.');
    }
  };

  if (currentScreen === 'login') {
    return <LoginScreen onClose={handleLogout} onLogin={handleLogin} />;
  }

  if (currentScreen === 'main' && user) {
    return <MainScreen onClose={handleLogout} user={user} scannedData={scannedData} records={records} onAddRecord={handleScan} />;
  }

  if (currentScreen === 'rewards' && user) {
    return <RewardsScreen onClose={() => setCurrentScreen('main')} userId={user} wasteWeights={wasteWeights} />;
  }

  if (currentScreen === 'scanner' && user) {
    return <QRScannerScreen onClose={() => setCurrentScreen('main')} onScan={handleScan} user={user} />;
  }

  if (currentScreen === 'analysis' && user) {
    return <AnalysisScreen onClose={() => setCurrentScreen('main')} wasteWeights={wasteWeights} environmentalImpact={MainScreen.environmentalImpact || { treesSaved: 0, waterSaved: 0, co2Saved: 0 }} />;
  }

  if (currentScreen === 'recycle' && user) {
    return <RecycleScreen onClose={() => setCurrentScreen('main')} />;
  }

  if (currentScreen === 'records' && user) {
    return <RecordsScreen onClose={() => setCurrentScreen('main')} user={user} />;
  }

  if (currentScreen === 'carbonWallet' && user) {
    return <CarbonWalletScreen onClose={() => setCurrentScreen('main')} carbonCredits={carbonCredits} setCurrentView={setCurrentScreen} />;
  }

  if (currentScreen === 'cryptoPaymentGateway' && user) {
    return <CryptoPaymentGatewayScreen onClose={() => setCurrentScreen('main')} carbonCredits={carbonCredits} setCarbonCredits={setCarbonCredits} />;
  }

  return (
    <SafeAreaView style={styles.safeArea}>
      <LinearGradient colors={['#2E7D32', '#1976D2']} style={styles.container}>
        <View style={styles.logoContainer}>
          <Animated.View style={[styles.iconContainer, { transform: [{ rotate }] }]}>
            <MaterialCommunityIcons name="recycle" size={80} color="#FFFFFF" />
          </Animated.View>
          <Text style={styles.title}>CycleWorks</Text>
          <Text style={styles.subtitle}>Smart Waste Management</Text>
        </View>

        <View style={styles.buttonContainer}>
          <Animated.View style={{ transform: [{ scale: scaleAnim }] }}>
            <Pressable style={styles.scanButton} onPress={() => setCurrentScreen('scanner')}>
              <MaterialCommunityIcons name="barcode-scan" size={24} color="#2E7D32" />
              <Text style={styles.buttonText}>Enter Bin Code</Text>
            </Pressable>
          </Animated.View>
          <Pressable style={styles.rewardsButton} onPress={() => setCurrentScreen('rewards')}>
            <MaterialCommunityIcons name="trophy-award" size={24} color="#FFFFFF" />
            <Text style={[styles.buttonText, { color: '#FFFFFF' }]}>View Rewards</Text>
          </Pressable>
        </View>

        <Image
          source={{ uri: 'https://api.a0.dev/assets/image?text=futuristic%20eco-friendly%20abstract%20pattern&aspect=16:9' }}
          style={styles.backgroundPattern}
        />
      </LinearGradient>
    </SafeAreaView>
  );
};

// Styles (Updated with creditsInput style)
const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
  },
  container: {
    flex: 1,
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
  },
  logoContainer: {
    alignItems: 'center',
    marginTop: '15%',
  },
  iconContainer: {
    width: 120,
    height: 120,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderRadius: 60,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 20,
  },
  title: {
    fontSize: 32,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: '#FFFFFF',
    opacity: 0.8,
  },
  buttonContainer: {
    width: '100%',
    gap: 12,
    marginBottom: 32,
  },
  scanButton: {
    flexDirection: 'row',
    backgroundColor: '#FFFFFF',
    padding: 16,
    borderRadius: 12,
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  rewardsButton: {
    flexDirection: 'row',
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    padding: 16,
    borderRadius: 12,
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.3)',
  },
  buttonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#2E7D32',
  },
  backgroundPattern: {
    position: 'absolute',
    width: '100%',
    height: '100%',
    opacity: 0.1,
    zIndex: -1,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 20,
  },
  backButton: {
    padding: 8,
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginLeft: 12,
  },
  content: {
    flex: 1,
  },
  loginContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
    width: '100%',
  },
  input: {
    backgroundColor: '#FFFFFF',
    borderRadius: 8,
    padding: 12,
    width: '80%',
    marginVertical: 10,
    fontSize: 16,
    color: '#333',
  },
  authButton: {
    backgroundColor: '#2E7D32',
    padding: 16,
    borderRadius: 12,
    alignItems: 'center',
    width: '80%',
    marginVertical: 10,
  },
  authButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  toggleText: {
    color: '#FFFFFF',
    fontSize: 14,
    marginTop: 10,
  },
  errorText: {
    color: '#D32F2F',
    fontSize: 14,
    marginBottom: 10,
  },
  webScannerContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  qrInput: {
    backgroundColor: '#FFFFFF',
    borderRadius: 8,
    padding: 12,
    width: '80%',
    marginVertical: 20,
    fontSize: 16,
    color: '#333',
  },
  mockScanButton: {
    backgroundColor: '#2E7D32',
    padding: 16,
    borderRadius: 12,
    alignItems: 'center',
  },
  mockScanButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  rescanButton: {
    backgroundColor: '#FFFFFF',
    padding: 16,
    borderRadius: 12,
    alignItems: 'center',
    margin: 12,
  },
  rescanButtonText: {
    color: '#2E7D32',
    fontSize: 16,
    fontWeight: '600',
  },
  scanInstruction: {
    fontSize: 16,
    color: '#FFFFFF',
    marginBottom: 10,
  },
  mainContainer: {
    flex: 1,
    padding: 16,
  },
  qrDataContainer: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  qrDataTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#2E7D32',
    marginBottom: 8,
  },
  qrDataText: {
    fontSize: 16,
    color: '#666',
  },
  noDataText: {
    fontSize: 16,
    color: '#FFFFFF',
    textAlign: 'center',
    marginBottom: 20,
  },
  statsContainer: {
    flexDirection: 'column',
    alignItems: 'center',
    marginBottom: 24,
  },
  statRow: {
    flexDirection: 'row',
    width: '100%',
    justifyContent: 'space-between',
  },
  carbonCreditsWrapper: {
    marginTop: 16,
    alignItems: 'center',
    width: '100%',
  },
  statCard: {
    flex: 1,
    backgroundColor: '#FFFFFF',
    padding: 16,
    borderRadius: 12,
    alignItems: 'center',
    marginHorizontal: 6,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
    maxWidth: (width - 48) / 2,
  },
  statValue: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#2E7D32',
    marginVertical: 4,
  },
  statLabel: {
    fontSize: 14,
    color: '#666',
  },
  floatingGrid: {
    position: 'absolute',
    bottom: 20,
    left: 20,
    right: 20,
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
    paddingHorizontal: 10,
    gap: 10,
  },
  floatingWidget: {
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    borderRadius: 20,
    paddingVertical: 8,
    paddingHorizontal: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 5,
    flex: 1,
    minWidth: (width - 60) / 2 - 10,
  },
  widgetButton: {
    alignItems: 'center',
    justifyContent: 'center',
  },
  widgetText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#FFFFFF',
    textAlign: 'center',
  },
  pointsCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    padding: 20,
    alignItems: 'center',
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  pointsValue: {
    fontSize: 36,
    fontWeight: 'bold',
    color: '#2E7D32',
    marginVertical: 8,
  },
  pointsLabel: {
    fontSize: 16,
    color: '#666',
  },
  tabSelector: {
    flexDirection: 'row',
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderRadius: 12,
    padding: 4,
    marginBottom: 20,
  },
  tabButton: {
    flex: 1,
    paddingVertical: 12,
    alignItems: 'center',
    borderRadius: 8,
  },
  tabButtonActive: {
    backgroundColor: '#FFFFFF',
  },
  tabButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  tabButtonTextActive: {
    color: '#2E7D32',
  },
  rewardsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
    gap: 16,
  },
  rewardCard: {
    width: (width - 48) / 2,
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  rewardTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#2E7D32',
    marginTop: 12,
    textAlign: 'center',
  },
  rewardPoints: {
    fontSize: 14,
    color: '#666',
    marginVertical: 8,
  },
  redeemButton: {
    backgroundColor: '#2E7D32',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 8,
    marginTop: 8,
  },
  disabledRedeemButton: {
    backgroundColor: '#999',
    opacity: 0.7,
  },
  redeemButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '600',
  },
  historyList: {
    gap: 12,
  },
  historyItem: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  historyItemContent: {
    flex: 1,
  },
  historyAction: {
    fontSize: 16,
    fontWeight: '600',
    color: '#2E7D32',
  },
  historyDate: {
    fontSize: 14,
    color: '#666',
    marginTop: 4,
  },
  historyPoints: {
    fontSize: 16,
    fontWeight: '600',
    marginLeft: 12,
  },
  achievementsSection: {
    marginTop: 24,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 16,
  },
  achievementsScroll: {
    marginHorizontal: -16,
    paddingHorizontal: 16,
  },
  achievementCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginRight: 16,
    width: width * 0.6,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  achievementTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#2E7D32',
    marginTop: 12,
  },
  progressBar: {
    height: 4,
    backgroundColor: 'rgba(46, 125, 50, 0.1)',
    borderRadius: 2,
    marginTop: 12,
    overflow: 'hidden',
  },
  progressFill: {
    height: '100%',
    backgroundColor: '#2E7D32',
  },
  analysisContainer: {
    flex: 1,
    padding: 16,
  },
  periodSelector: {
    flexDirection: 'row',
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderRadius: 12,
    padding: 4,
    marginBottom: 24,
  },
  periodButton: {
    flex: 1,
    paddingVertical: 8,
    alignItems: 'center',
    borderRadius: 8,
  },
  periodButtonActive: {
    backgroundColor: '#FFFFFF',
  },
  periodButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '600',
  },
  periodButtonTextActive: {
    color: '#2E7D32',
  },
  chartContainer: {
    marginBottom: 24,
  },
  pieChart: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 12,
  },
  pieChartItem: {
    width: '47%',
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    borderRadius: 12,
    padding: 16,
    alignItems: 'center',
  },
  pieChartLabel: {
    color: '#FFFFFF',
    fontSize: 14,
    marginVertical: 4,
  },
  pieChartValue: {
    color: '#FFFFFF',
    fontSize: 20,
    fontWeight: 'bold',
  },
  impactContainer: {
    marginBottom: 24,
  },
  impactGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 12,
  },
  impactCard: {
    width: '30%',
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 12,
    alignItems: 'center',
  },
  impactValue: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#2E7D32',
    marginVertical: 4,
  },
  impactLabel: {
    fontSize: 12,
    color: '#666',
    textAlign: 'center',
  },
  recycleContainer: {
    flex: 1,
    padding: 16,
  },
  viewToggle: {
    flexDirection: 'row',
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderRadius: 12,
    padding: 4,
    marginBottom: 16,
  },
  viewToggleButton: {
    flex: 1,
    paddingVertical: 8,
    alignItems: 'center',
    borderRadius: 8,
  },
  viewToggleButtonActive: {
    backgroundColor: '#FFFFFF',
  },
  orgCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  orgHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  orgName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#2E7D32',
  },
  statusIndicator: {
    width: 8,
    height: 8,
    borderRadius: 4,
  },
  orgTypes: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
    marginBottom: 12,
  },
  typeTag: {
    backgroundColor: 'rgba(46, 125, 50, 0.1)',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 6,
  },
  typeText: {
    color: '#2E7D32',
    fontSize: 12,
  },
  orgFooter: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 4,
  },
  distanceText: {
    color: '#666',
    fontSize: 14,
  },
  mapPlaceholder: {
    height: height * 0.5,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderRadius: 12,
    justifyContent: 'center',
    alignItems: 'center',
  },
  mapPlaceholderText: {
    color: '#FFFFFF',
    fontSize: 16,
    marginTop: 12,
  },
  recordCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  recordText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#2E7D32',
    marginBottom: 4,
  },
  recordDate: {
    fontSize: 14,
    color: '#666',
  },
  modalOverlay: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
  modalContent: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 20,
    width: width * 0.9,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#2E7D32',
  },
  modalCloseButton: {
    padding: 8,
  },
  distributionList: {
    gap: 12,
  },
  distributionItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: '#E0E0E0',
  },
  distributionType: {
    fontSize: 16,
    color: '#666',
  },
  distributionValue: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#2E7D32',
  },
  carbonWalletContainer: {
    width: '100%',
    alignItems: 'center',
    marginBottom: 24,
  },
  carbonWalletCard: {
    width: '90%',
    borderRadius: 16,
    padding: 20,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 6,
    elevation: 8,
  },
  carbonWalletHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  carbonWalletTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginLeft: 8,
  },
  carbonWalletValue: {
    fontSize: 36,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 8,
  },
  carbonWalletSubtitle: {
    fontSize: 14,
    color: '#FFFFFF',
    opacity: 0.9,
    marginBottom: 12,
  },
  carbonWalletFooter: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    width: '100%',
    alignItems: 'center',
  },
  carbonWalletInfo: {
    fontSize: 12,
    color: '#FFFFFF',
    opacity: 0.8,
  },
  walletSummary: {
    alignItems: 'center',
    marginBottom: 24,
  },
  walletIcon: {
    fontSize: 48,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 8,
  },
  walletCredits: {
    fontSize: 36,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 8,
  },
  walletValue: {
    fontSize: 24,
    color: '#FFFFFF',
    marginBottom: 12,
  },
  walletSubtitle: {
    fontSize: 16,
    color: '#FFFFFF',
    opacity: 0.9,
  },
  detailsSection: {
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderRadius: 12,
    padding: 16,
    marginBottom: 24,
  },
  detailItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(255, 255, 255, 0.2)',
  },
  detailLabel: {
    fontSize: 16,
    color: '#FFFFFF',
  },
  detailValue: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#FFFFFF',
  },
  actionSection: {
    alignItems: 'center',
  },
  marketplaceText: {
    fontSize: 14,
    color: '#FFFFFF',
    textAlign: 'center',
    marginBottom: 16,
  },
  sellButton: {
    backgroundColor: '#2E7D32',
    padding: 16,
    borderRadius: 12,
    alignItems: 'center',
    width: '80%',
  },
  sellButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  paymentSummary: {
    alignItems: 'center',
    marginBottom: 24,
  },
  paymentIcon: {
    fontSize: 48,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 8,
  },
  paymentTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 12,
  },
  paymentSubtitle: {
    fontSize: 16,
    color: '#FFFFFF',
    marginBottom: 12,
  },
  creditsInput: {
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    borderRadius: 8,
    padding: 12,
    width: '80%',
    fontSize: 16,
    color: '#FFFFFF',
    textAlign: 'center',
    marginBottom: 12,
  },
  paymentAmount: {
    fontSize: 36,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 8,
  },
  paymentValue: {
    fontSize: 24,
    color: '#FFFFFF',
  },
  paymentDetails: {
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderRadius: 12,
    padding: 16,
    marginBottom: 24,
  },
  qrSection: {
    alignItems: 'center',
    marginBottom: 24,
  },
  qrInstruction: {
    fontSize: 14,
    color: '#FFFFFF',
    textAlign: 'center',
    marginBottom: 16,
  },
  qrPlaceholder: {
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    borderRadius: 12,
    padding: 20,
    alignItems: 'center',
  },
  qrText: {
    fontSize: 16,
    color: '#FFFFFF',
    marginTop: 8,
  },
 walletAddress: {
    fontSize: 14,
    color: '#FFFFFF',
    opacity: 0.8,
    marginTop: 12,
    textAlign: 'center',
  },
  confirmButton: {
    backgroundColor: '#2E7D32',
    padding: 16,
    borderRadius: 12,
    alignItems: 'center',
    width: '80%',
    alignSelf: 'center',
  },
  confirmButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
  },
});